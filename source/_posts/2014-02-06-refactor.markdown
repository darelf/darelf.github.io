---
layout: post
title: "Refactor"
date: 2014-02-06 09:40:06 -0500
comments: true
categories: [programming, tips]
---
You've heard of refactoring. Wikipedia has a pretty good [definition](http://en.wikipedia.org/wiki/Code_refactoring).
You have probably done it. You may not have even known it.

I often think of refactoring as the primary job in programming. It cuts to the heart of
what this is all about, and the philosophy of programming in general. Refactoring code well
means being disciplined about code structure in the first place. It is the anti-spaghetti code.
It is the way in which we accomplish those ideals of "elegant" code.
<!--more-->
So, I thought I would give a recent example of something I worked on. It's a small bit. Which
is the best kind, and goes to the point of the whole thing. The rule I live by is to reduce
the problem into smaller and smaller pieces until it is actually manageable.

My problem was filtering.

Specifically, filtering a list of javascript objects by some items in the keys. Easy one that.
Then, one of the filters needed to check for the existance of some key on some other list of
objects.

In the first pass of this, the filter function was written specifically to the problem we
were trying to solve. Here's an example (although the objects were more complex than this):

    var array_1 = [{name: 'Joe'}, {name: 'Jane'}]
    
    var array_2 = [{id: 1, name: 'Jane'}, {id:2, name: 'Jane'}]

So, the idea is to filter the first array to only include objects whose `name` attribute is
found in the second array. That is, if we run the filter on this sample, it should return this array:
`[{name: 'Jane'}]`

Again, the first pass of this looked like this:

    var new_array = array_1.filter(function(v,i,a) {
        for (i = 0; i < array_2.length; i++) {
            if (array_2[i]['name'] == v['name']) return true
        }
        return false
    })

This is very specific. The name of the key, the fact that `array_2` needs to be in scope, these
all have to be true when running this. More importantly, such a function that looks for a
match in an array could be very useful in more than one context. It's an obvious (some
would say blindingly so) candidate for refactoring.

Without much ado, here's the refactored version of this that I can now use in other places
where I need similar functionality:

    function contains(a, key, value) {
        for (i = 0; i < a.length; i++) {
            if (a[i][key] == value) return true
        }
        return false
    }

Much better! Now I can call this function in order to determine if an array of objects
contains a value on a given key. It's not perfect. And it's specific to an array of
objects, and won't work on flat arrays. It could be made even better or more generic,
though we begin at that point to enter the territory of trade-off value.

This version makes a lot of sense in the context of the application, as that application
uses quite a lot of arrays of objects.

It may seem like a small thing, and it is, but these kind of tiny little refactorings
over the course of an entire application will make the code better, more readable,
and more maintainable. ( The name `contains` is easy to read and understand what
it's supposed to do )
