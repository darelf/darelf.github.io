<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Proxy | The Blog from Darel]]></title>
  <link href="http://darelf.github.io/blog/categories/proxy/atom.xml" rel="self"/>
  <link href="http://darelf.github.io/"/>
  <updated>2014-05-08T15:47:14-04:00</updated>
  <id>http://darelf.github.io/</id>
  <author>
    <name><![CDATA[Darel Finkbeiner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bouncing and Routing]]></title>
    <link href="http://darelf.github.io/blog/2014/05/08/bouncing-and-routing/"/>
    <updated>2014-05-08T10:51:08-04:00</updated>
    <id>http://darelf.github.io/blog/2014/05/08/bouncing-and-routing</id>
    <content type="html"><![CDATA[<p>Oh, man. I’ve created two different really great node.js web services/sites and now
I want to host them. Oh man, this is going to be great!</p>

<p>Hmm. I can only expose a single port on a single machine to the outside.
How can I make that work? What if my services are on multiple physical machines?</p>

<h3 id="finding-the-right-server">Finding the Right Server</h3>

<p>Enter <a href="https://github.com/substack/seaport">seaport</a>. This little beauty is great
for registering/discovering web services. It’s soooooo much easier than anything
else you’ve ever tried. (Although, as of this writing, there is an issue that needs
patching, and there’s even a pull request for it at
<a href="https://github.com/substack/seaport/pull/57">https://github.com/substack/seaport/pull/57</a>
so I would just apply that little bit of code if I were you… at least until it gets
merged)</p>

<p>Let me show you:</p>

<pre><code>var seaport = require('seaport')
var ports = seaport.createServer()
ports.listen(9001)
</code></pre>

<p>That’s it for the server.</p>

<p>Now, your node.js webservices need to pick their port by asking that seaport
server we just created. Let’s say Service One is on the same physical machine.</p>

<pre><code>var http = require('http')
var seaport = require('seaport').connect('localhost', 9001, { secret: 'totallysecret' })
var port = seaport.register('serviceone@0.0.1')
http.createServer(function(req,res) { res.end("I'm Service One!\n") }).listen(port)
</code></pre>

<p>What just happened?</p>

<p>Well, we connected to the registry, and then we said “When someone asks for ‘serviceone’ with
a version of ‘0.0.1’, then you can direct them our way.” The seaport then gives you a port number
and you use that in your server.</p>

<p>Let’s now say that Service Two is on a different physical machine. The seaport is on a server
named “kahleesi” while Service Two is running on “katniss”. So first connect to the seaport
server:</p>

<pre><code>... stuff ...
var seaport = require('seaport').connect('kahleesi', 9001, {secret: 'totallysecret'})
var port = seaport.register('servicetwo@0.0.1')
... actual server ...
</code></pre>

<p>Now that we have the services all talking to each other… what now?</p>

<h2 id="url-routing">URL Routing</h2>

<p>Let’s say your web services only use straight up, request/response, HTTP. No
websockets. And you aren’t allowed to have multiple hostnames for some reason.</p>

<p>You might be tempted to use <a href="https://github.com/substack/bouncy">bouncy</a> and under other
circumstances, I would agree. If you can use vhost style routing, then bouncy is the
perfect solution to your problem.</p>

<p>The problem here is that without hostname differentiation,
the client browser will only get the socket once. This means routing by URL won’t work.
Or at least, it will seem to work until you try to open another tab and go to a different
URL on that same host… then you’ll realize that bouncy is connecting the socket directly
and once it does that it doesn’t look at it ever again so it has no idea you wanted something
different. Kind of a nightmare.</p>

<p>So… we build a proxy. In other languages, let’s say “lesser” languages, building such
a proxy would be hard work.  But in node.js it is really easy.  Here’s how I did it.</p>

<p>First we will create a combination seaport/http proxy server so that it can all be
combined into a single process.</p>

<pre><code>var http = require('http')
var seaport = require('seaport')
var argv = require('optimist').default('p', 8080).argv

var ports = seaport.createServer()
ports.listen(9001)

var server = http.createServer(function(req,res) {
  if (/^\/serviceone/.test(req.url)) {
    var service = 'serviceone@0.0.1'
  } else if (/^\/servicetwo/.test(req.url)) {
    var service = 'servicetwo@0.0.1'
  }
  
  if (service) {
    // Here's where we ask seaport if it knows about this service
    var ps = ports.query(service)
    if (ps.length === 0) {
      res.end("No Service Available")
    } else {
      // At this point, ps is an array of host,port that can respond to these requests
      // I'm just going to take the first one...
      
      // Here's the actual proxy stuff
      var opts = {host: ps[0].host, port: ps[0].port, method: req.method,
                  path: req.url, headers: req.headers}
      var proxy = http.request(opts)
      proxy.on('response', function (response) {
        response.on('data', function(chunk) {
          res.write(chunk)
        })
        response.on('end', function() { res.end() })
        res.writeHead(response.statusCode, response.headers)
      })
      req.on('data', function(chunk) { proxy.write(chunk) })
      req.on('end', function() { proxy.end() })
    }        
  } else {
    // Well, we have no idea what they want
    res.end("Whatever, dude.")
  }
}).listen(argv.p)
</code></pre>

<p>I don’t know if you’ve ever tried to write an http proxy by hand before, but in most
other langauges it takes a lot more work than this.</p>

<p>Basically, we are taking their request, looking for where the “real” server is, and
then creating a new request with the host and port of the “real” server and then
returning the response back to the client.  NONE THE WISER.</p>

<p>We just hook into the <code>data</code> and <code>end</code> events and just rewrite stuff. It’s pretty
straight forward.</p>

<p>This way it doesn’t really matter how many services, or even if you have different
versions, or whatever. You can just route to your heart’s content based on any
criteria you want. You have the full request and headers to play with, so you can
make up whatever rules you can code in javascript.</p>

<p>Have Fun!</p>
]]></content>
  </entry>
  
</feed>
