<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | The Blog from Darel]]></title>
  <link href="http://darelf.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://darelf.github.io/"/>
  <updated>2014-05-08T15:47:14-04:00</updated>
  <id>http://darelf.github.io/</id>
  <author>
    <name><![CDATA[Darel Finkbeiner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bouncing and Routing]]></title>
    <link href="http://darelf.github.io/blog/2014/05/08/bouncing-and-routing/"/>
    <updated>2014-05-08T10:51:08-04:00</updated>
    <id>http://darelf.github.io/blog/2014/05/08/bouncing-and-routing</id>
    <content type="html"><![CDATA[<p>Oh, man. I’ve created two different really great node.js web services/sites and now
I want to host them. Oh man, this is going to be great!</p>

<p>Hmm. I can only expose a single port on a single machine to the outside.
How can I make that work? What if my services are on multiple physical machines?</p>

<h3 id="finding-the-right-server">Finding the Right Server</h3>

<p>Enter <a href="https://github.com/substack/seaport">seaport</a>. This little beauty is great
for registering/discovering web services. It’s soooooo much easier than anything
else you’ve ever tried. (Although, as of this writing, there is an issue that needs
patching, and there’s even a pull request for it at
<a href="https://github.com/substack/seaport/pull/57">https://github.com/substack/seaport/pull/57</a>
so I would just apply that little bit of code if I were you… at least until it gets
merged)</p>

<p>Let me show you:</p>

<pre><code>var seaport = require('seaport')
var ports = seaport.createServer()
ports.listen(9001)
</code></pre>

<p>That’s it for the server.</p>

<p>Now, your node.js webservices need to pick their port by asking that seaport
server we just created. Let’s say Service One is on the same physical machine.</p>

<pre><code>var http = require('http')
var seaport = require('seaport').connect('localhost', 9001, { secret: 'totallysecret' })
var port = seaport.register('serviceone@0.0.1')
http.createServer(function(req,res) { res.end("I'm Service One!\n") }).listen(port)
</code></pre>

<p>What just happened?</p>

<p>Well, we connected to the registry, and then we said “When someone asks for ‘serviceone’ with
a version of ‘0.0.1’, then you can direct them our way.” The seaport then gives you a port number
and you use that in your server.</p>

<p>Let’s now say that Service Two is on a different physical machine. The seaport is on a server
named “kahleesi” while Service Two is running on “katniss”. So first connect to the seaport
server:</p>

<pre><code>... stuff ...
var seaport = require('seaport').connect('kahleesi', 9001, {secret: 'totallysecret'})
var port = seaport.register('servicetwo@0.0.1')
... actual server ...
</code></pre>

<p>Now that we have the services all talking to each other… what now?</p>

<h2 id="url-routing">URL Routing</h2>

<p>Let’s say your web services only use straight up, request/response, HTTP. No
websockets. And you aren’t allowed to have multiple hostnames for some reason.</p>

<p>You might be tempted to use <a href="https://github.com/substack/bouncy">bouncy</a> and under other
circumstances, I would agree. If you can use vhost style routing, then bouncy is the
perfect solution to your problem.</p>

<p>The problem here is that without hostname differentiation,
the client browser will only get the socket once. This means routing by URL won’t work.
Or at least, it will seem to work until you try to open another tab and go to a different
URL on that same host… then you’ll realize that bouncy is connecting the socket directly
and once it does that it doesn’t look at it ever again so it has no idea you wanted something
different. Kind of a nightmare.</p>

<p>So… we build a proxy. In other languages, let’s say “lesser” languages, building such
a proxy would be hard work.  But in node.js it is really easy.  Here’s how I did it.</p>

<p>First we will create a combination seaport/http proxy server so that it can all be
combined into a single process.</p>

<pre><code>var http = require('http')
var seaport = require('seaport')
var argv = require('optimist').default('p', 8080).argv

var ports = seaport.createServer()
ports.listen(9001)

var server = http.createServer(function(req,res) {
  if (/^\/serviceone/.test(req.url)) {
    var service = 'serviceone@0.0.1'
  } else if (/^\/servicetwo/.test(req.url)) {
    var service = 'servicetwo@0.0.1'
  }
  
  if (service) {
    // Here's where we ask seaport if it knows about this service
    var ps = ports.query(service)
    if (ps.length === 0) {
      res.end("No Service Available")
    } else {
      // At this point, ps is an array of host,port that can respond to these requests
      // I'm just going to take the first one...
      
      // Here's the actual proxy stuff
      var opts = {host: ps[0].host, port: ps[0].port, method: req.method,
                  path: req.url, headers: req.headers}
      var proxy = http.request(opts)
      proxy.on('response', function (response) {
        response.on('data', function(chunk) {
          res.write(chunk)
        })
        response.on('end', function() { res.end() })
        res.writeHead(response.statusCode, response.headers)
      })
      req.on('data', function(chunk) { proxy.write(chunk) })
      req.on('end', function() { proxy.end() })
    }        
  } else {
    // Well, we have no idea what they want
    res.end("Whatever, dude.")
  }
}).listen(argv.p)
</code></pre>

<p>I don’t know if you’ve ever tried to write an http proxy by hand before, but in most
other langauges it takes a lot more work than this.</p>

<p>Basically, we are taking their request, looking for where the “real” server is, and
then creating a new request with the host and port of the “real” server and then
returning the response back to the client.  NONE THE WISER.</p>

<p>We just hook into the <code>data</code> and <code>end</code> events and just rewrite stuff. It’s pretty
straight forward.</p>

<p>This way it doesn’t really matter how many services, or even if you have different
versions, or whatever. You can just route to your heart’s content based on any
criteria you want. You have the full request and headers to play with, so you can
make up whatever rules you can code in javascript.</p>

<p>Have Fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using NPM Like a Boss]]></title>
    <link href="http://darelf.github.io/blog/2014/04/22/using-npm-like-a-boss/"/>
    <updated>2014-04-22T13:50:43-04:00</updated>
    <id>http://darelf.github.io/blog/2014/04/22/using-npm-like-a-boss</id>
    <content type="html"><![CDATA[<p>So I have to keep track of what I work on each week and send
out an email with a short description of each. Yeah. You know.</p>

<p>I thought “What a great idea for making a script that handles all
that with a simple command line!” I hear you mumbling “nerd”. That’s
OK. I can take it.
<!--more-->
## Enter… The Script</p>

<p>Well, I just need a list, each list can live in a text file that I
can then email to my boss each week. What do I need?</p>

<p>Very little. I use <a href="http://momentjs.com">moment</a> to figure out what
week I’m working on automatically and store it in the correct file.
I also use <a href="http://github.com/substack/minimist#minimist">minimist</a> to do
command line parsing since I barely need anything there.</p>

<p>So the beginning looked like this:</p>

<pre><code>var fs = require('fs')
var moment = require('moment')
</code></pre>

<p>Then I realized I (or someone) might want it daily, so I add a
default. And while I’m at it, let’s define a working directory
for the files.</p>

<pre><code>var defaults = { weekly: true, workdir: process.env.HOME + '/worklist/' }
var argv = require('minimist')(process.argv.slice(2), {default: defaults})
</code></pre>

<p>You could override those, for instance with <code>--workdir=/my/crazy/directory/</code> but
hopefully these are sane defaults.</p>

<p>Now let’s figure out what file we should be working with:</p>

<pre><code>var m = moment()
if (argv.weekly) {
  m = moment().startOf('week').add('days', 1)
}

var fname = argv.workdir + m.format('YYYY-MM-DD') + '.txt'
</code></pre>

<p>The file name will now have the date, or Monday’s date when we are doing weekly
files. This let’s us choose.</p>

<p>Next we read in the file, if it exists, and parse the contents:</p>

<pre><code>var contents = []
fs.readFile(fname, function(err, data) {
  if (!err) {
    contents = data.toString().split('\n').filter(Boolean)
  }
  parseCommands()
})
</code></pre>

<p>That <code>parseCommands()</code> function will need to be defined. It’s basically the
entry point for looking at any command the user sent and taking the correct
action. I decided I only needed 3 commands:  list, add, and delete.</p>

<pre><code>function parseCommands() {
  if (argv._.indexOf('list') &gt; -1) {
    contents.forEach(function(v,i) { console.log("%d: %s", i, v) })
  }
  if (argv.add) {
    contents.push(argv.add)
    saveContents()
  }
  if (argv.d) {
    if (contents.length &gt; argv.d) {
      delete contents[argv.d]
      saveContents()
    }
  }
}
</code></pre>

<p>What we have going on here is a <code>list</code> command that just dumps the contents.
Next, we have a <code>--add="This is the item to add"</code> command that will add
a single line to our file, and then it will save the file. (see below for that)
And finally the <code>-d #</code> command that takes the number of the item to delete.</p>

<p>Not really pretty, but since I’m mostly just adding and listing, it seems
to work just fine. And since the files are just text files, I can always
edit them by hand, feed them into other programs or utilities easily, and
generally use any of my typical Unixy workflows.</p>

<p>Oh, and saving the file just looks like this:</p>

<pre><code>function saveContents() {
  fs.writeFile(fname, contents.join('\n') + '\n')
}
</code></pre>

<h2 id="enter-npm">Enter… NPM!!!</h2>

<p>How does the <code>npm</code> utility enter in to this? I’m glad you asked!</p>

<p>NPM has a facility called “bin” in the <code>package.json</code> file that allows you
to define so-called <code>binary</code> programs to be installed. In my case, this is
just a node js script as shown above.</p>

<p>What steps do I take to make this work as a command? I.e. <code>worklist list</code> or
<code>worklist --add="I totally did important work just now"</code></p>

<h3 id="step-one">Step One</h3>

<p>Add the “shebang” at the beginning of the script telling it to use node.</p>

<pre><code>#!/usr/bin/env node
</code></pre>

<p>For the script, that’s it.</p>

<h3 id="step-two">Step Two</h3>

<p>Add the entry into <code>package.json</code> telling it that the script is a binary.
For our example, I put the script in <code>./bin/worklist.js</code> so that’s what I
will tell NPM. Also, I need to tell it what I want the command to look like,
which in this example is <code>worklist</code> so that I can just type <code>worklist</code> on the
command line and it will run my script in node automatically.</p>

<pre><code>{
  ... bunch of normal package.json stuff ...
  "bin": {
    "worklist": "./bin/worklist.js"
  }
}
</code></pre>

<h3 id="step-three">Step Three</h3>

<p>Install it globally.</p>

<pre><code>npm install -g
</code></pre>

<p>You will notice NPM telling you that it is linking the script into your path
somewhere. I believe on Windows that this also automatically wraps it in a
<code>.cmd</code> for you. WIN.</p>

<h3 id="step-four">Step Four</h3>

<p>Pour a hot cup of coffee, light up your favorite cigar, and enjoy. THIS STEP
IS NOT OPTIONAL.</p>

<h2 id="feedback">Feedback</h2>

<p>Please, please, please, send me feedback, ask me questions. Yeah. You can do it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evented]]></title>
    <link href="http://darelf.github.io/blog/2014/04/09/evented/"/>
    <updated>2014-04-09T13:06:49-04:00</updated>
    <id>http://darelf.github.io/blog/2014/04/09/evented</id>
    <content type="html"><![CDATA[<p>One of the big advantages of <a href="http://nodejs.org">node.js</a> is that of events and
an emphasis on asynchronous programming.
<!--more-->
It is almost a given, at this point, that if you learned all your programming
from college, you probably didn’t learn how to write asynchronous functions. In
fact, you were probably warned away from dealing with things that were asynchronous
directly. Instead using pre-packaged frameworks that exposed asynchronous things
( like I/O ) as if they were synchronous, solving your problem for you.</p>

<p>That’s fine. But node.js don’t truck with that.</p>

<p>If you are going to do something in node.js, you need to deal with asynchronous
functions. You need to create functions that can be called asynchronously, and that
play well in that kind of ecosystem. Here are a few tips to help you make the
transition from one to the other.</p>

<p>** Problem - Big File</p>

<p>You have to create many millions of rows of data and output them to a file. You
can’t keep the whole file in memory and write it all at once. You may have infinite
time but you don’t have infinite memory.</p>

<p>Step one is to have a function that creates a row of data.
    function makeOneRow(item) {
      // do something fancy
      return rowOfData
    }</p>

<p>Step two is to create a writable stream. For our purposes, we say a file, so we can
use the <code>fs</code> module.
    var fs = require(‘fs’)
    var outputFile = fs.createWriteableStream(‘name-of-output-file.txt’)</p>

<p>Step three is to loop through your list of items to create and write them to the file
    listOfItems.forEach(function (item) {
      outputFile.write(makeOneRow(item))
    })
    outputFile.end()</p>

<p>“Wait a second!” I hear you exclaim. “What if the makeOneRow() is also asynchronous?”
Maybe the call that makes a row has to call the database, which is almost certainly an
asynchronous call. In this case, we would quickly crash.</p>

<p>One solution to this problem is my favorite: events. The stream functionality that is
available in node.js makes events a natural choice for this. Let’s say for the moment
that creating a row takes a database call that uses a callback.</p>

<pre><code>function databaseCall(item, callback) {
  // do database stuff and store results in processData variable.
  callback(processData)
}
</code></pre>

<p>What do we do with this callback? Well, if we are using events we need a javascript
object that is an <code>EventEmitter</code>. So let’s create one real quick.</p>

<pre><code>var util = require('util')
var events = require('events')

function MyObject() {
  events.EventEmitter.call(this)
}
util.inherits(MyObject, events.EventEmitter)

var myobject = new MyObject()
</code></pre>

<p>Ok. What does this give us? Well, it gives us an object that can call <code>emit</code> in order
to send out events to listeners. So let’s adapt our function that makes items to use it.</p>

<pre><code>MyObject.prototype.makeOneRow = function(item) {
  var self = this
  databaseCall(item, function(processData) {
    self.emit('data', processData)
  })
}
</code></pre>

<p>Now all we have to do is listen for data events and write them to the file. The other
thing is calling only one of these at a time, since we care about the order that
things get written to the file. So when listening for the ‘data’ event, check if
you have more items, and if you do then ask for another one.</p>

<pre><code>function doOne() {
  var nextItem = listOfItems.splice(0,1)
  myobject.makeOneRow(nextItem)
}

myobject.on('data', function(newdata) {
  outputFile.write(newdata)
  if (listOfItems.length &gt; 0) doOne()
})
</code></pre>

<p>Even better would be to allow the object to keep track of how many items, and send
an ‘end’ event when it reached the end. I’ll leave that as an exercise. (You gotta
learn to do it yourself eventually, right?)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Programming]]></title>
    <link href="http://darelf.github.io/blog/2014/04/02/simple-programming/"/>
    <updated>2014-04-02T08:19:57-04:00</updated>
    <id>http://darelf.github.io/blog/2014/04/02/simple-programming</id>
    <content type="html"><![CDATA[<p>“All that is complex is not useful. All that is useful is simple.” – Mikhail Kalashnikov</p>

<p>“A scientific theory should be as simple as possible, but no simpler.” – Albert Einstein</p>

<p>Ran into this problem recently. It’s very difficult to deal with programmers sometimes,
as they tend to very often be right in the face of naysayers, they get used to it and
just assume that their way is right even when it’s obviously wrong.
<!--more-->
Programmers fall for the same failings of the rest of humanity, such as resisting change,
or taking perverse pride in something they did even when that thing is awful. I hear so
many times from people that they “worked so hard” on something. And I think, “But that
something you worked hard on is horrible, you should not be proud of it or resist replacing
it with something good.” (I have rather lengthy internal monologues sometimes)</p>

<p>The big issues when code gets complex center around maintainability. That extends both to
bringing in new programmers on a project, as well as revisiting code that you have written
in the past. It also affects interoperability. Simple interfaces are better than complex
ones. As simple as possible while still accomplishing all the goals.</p>

<p>So, if you are familiar with one tool and you start using it to solve a problem that it
is not designed for, you will inexorably end up with a much more complex system than
necessary. If you use techniques that aren’t tailored to the task at hand, you will
have the same problem.</p>

<p>Choices in programming should be made by programmers not by business decisions. Goals
and products should be chosen by business not by programmers. Once you start mixing, you
end up with a horrible mess that is far more costly and a nightmare to maintain. When
business makes the decision on programming language, techniques, etc. you are headed into
the dystopian realm of ill-functioning, difficult to maintain software.</p>

<p>“But it’s easier to hire Java (or insert other horrible languages) programmers…”
I hear you cry. First, I call BS on that on its face. Second, you don’t want programmers
that are easy to hire. That’s like saying it’s easier to hire unskilled laborers.
Of course it is. There’s a reason for that.</p>

<p>Advice is only as good as the people taking it.</p>

<p>When we say “make it simple”, we mean also “make it work and work well”. Don’t over-simplify,
but choose the right tool and the right techniques and make it as simple as it can be.
Make code easy to reason about. Make it easy to extend. Make it easy to integrate. Make it
easy. Simple is easy. Complex is hard.</p>

<p>Just because you haven’t encountered a technique before doesn’t mean it’s hard. If you
look at something like <a href="http://en.wikipedia.org/wiki/Bitmap_index">WAH</a> or CONCISE it may look
difficult and complex at first, but it’s really rather simple. Honestly, when you realize
that half the compression is simply packing and run length encoding it’s very easy to
grasp, and importantly easy to reason about.</p>

<p>Keep code simple. Keep inter-process interfaces simple. Keep APIs simple. Make the so-called
surface area easy to grasp, easy to reason about. Keep it easy to maintain, easy to upgrade,
easy to extend. You can’t see all futures, but if you make the code simple it will be
easier to adapt to new and changing environments.</p>

<p>If you don’t, you are inviting trouble for yourself and others. You are the Causer of
Problems. Don’t be the bad guy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Synchonization]]></title>
    <link href="http://darelf.github.io/blog/2014/03/18/data-synchonization/"/>
    <updated>2014-03-18T09:40:31-04:00</updated>
    <id>http://darelf.github.io/blog/2014/03/18/data-synchonization</id>
    <content type="html"><![CDATA[<p>Data. Always getting out of sync. You’d think it would learn. You’d think that
maybe if you tightened up your code it would never get out of sync.</p>

<p>Well. Data don’t care what you think. That’s why CRC, etc.
<!--more-->
At a high level, though, it’s very easy to see why data needs to be synchronized
and how it can get messed up. Two people updating a spreadsheet separately can
easily end up with two different versions, and then needing to synchronize them
(aka merge).</p>

<p>What are some of our options? Glad you asked.</p>

<p>One of my favorite ways of making it work is “append only”. That is, you can never
delete anything, you can only add to it. This makes synchronization easy. You just
ask if they have any items you don’t have, and that’s it. Synchronized.</p>

<p>Updates are also fairly easy. Each record having a time it was last updated, or
a sequence number or whatever, and you can just ask for the latest versions. Again,
that’s pretty much a snap.</p>

<p>What about deletes?</p>

<p>Ah. Well, this is only slightly more complicated. In this case, what you really need
is a “history”. This history can actually just be items that were deleted. The
simplest design, of course, is to have each record have a sync field (either a
sequence or a timestamp) and also have a “tombstone” or list of items that were
deleted. You don’t even need to know when, necessarily, if a given id can never
be reused.</p>

<p>If they can be reused, then you need to also include the sync field in the history,
that way something might be “brought back to life” later. This kind of necromancy
is not uncommon in many systems.</p>

<p>So, what do we have? Well, in order to keep multiple copies of the same data in
sync with each other efficiently (that is, not just checking every line and
replacing the whole dataset), a system should have: a history that lists the latest
version of each item with a synchronization field of some kind, such as a
monotonic timestamp, and the action of ‘created’, ‘updated’, or ‘deleted’.</p>

<p>One of the issues is with timestamps. If you need to synchronize in real-time
between multiple nodes that share data, and you have a high rate of operations,
your timestamps will probably cause you issues. The issues are directly related
to the same problem of keeping two clocks in sync. When you have multiple
processes on different machines doing multiple updates per second each, you are
going to have to come up with some scheme for ordering them.</p>

<p>This can be important for updates/deletes, depending on how you structure things.
Very often, the solutions end up being a combination of timestamp, process name,
and a sequence number. There are many different approaches, but they all follow
the same pattern. A decent approach, if you are satisfied with “rough” ordering,
would be something like <a href="https://github.com/twitter/snowflake">Twitter Snowflake</a>.</p>

<p>But don’t stop there. There’s a lot to learn about this topic, and it is
fascinating in and of itself.</p>

<p>Warning: make sure you don’t over-engineer your solution. If you are only worried
about synchronizing data that gets updated hourly or daily, then don’t overthink
it and come up with some really complicated system.</p>
]]></content>
  </entry>
  
</feed>
