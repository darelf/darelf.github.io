<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Blog from Darel]]></title>
  <link href="http://darelf.github.io/atom.xml" rel="self"/>
  <link href="http://darelf.github.io/"/>
  <updated>2014-05-08T15:47:14-04:00</updated>
  <id>http://darelf.github.io/</id>
  <author>
    <name><![CDATA[Darel Finkbeiner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bouncing and Routing]]></title>
    <link href="http://darelf.github.io/blog/2014/05/08/bouncing-and-routing/"/>
    <updated>2014-05-08T10:51:08-04:00</updated>
    <id>http://darelf.github.io/blog/2014/05/08/bouncing-and-routing</id>
    <content type="html"><![CDATA[<p>Oh, man. I’ve created two different really great node.js web services/sites and now
I want to host them. Oh man, this is going to be great!</p>

<p>Hmm. I can only expose a single port on a single machine to the outside.
How can I make that work? What if my services are on multiple physical machines?</p>

<h3 id="finding-the-right-server">Finding the Right Server</h3>

<p>Enter <a href="https://github.com/substack/seaport">seaport</a>. This little beauty is great
for registering/discovering web services. It’s soooooo much easier than anything
else you’ve ever tried. (Although, as of this writing, there is an issue that needs
patching, and there’s even a pull request for it at
<a href="https://github.com/substack/seaport/pull/57">https://github.com/substack/seaport/pull/57</a>
so I would just apply that little bit of code if I were you… at least until it gets
merged)</p>

<p>Let me show you:</p>

<pre><code>var seaport = require('seaport')
var ports = seaport.createServer()
ports.listen(9001)
</code></pre>

<p>That’s it for the server.</p>

<p>Now, your node.js webservices need to pick their port by asking that seaport
server we just created. Let’s say Service One is on the same physical machine.</p>

<pre><code>var http = require('http')
var seaport = require('seaport').connect('localhost', 9001, { secret: 'totallysecret' })
var port = seaport.register('serviceone@0.0.1')
http.createServer(function(req,res) { res.end("I'm Service One!\n") }).listen(port)
</code></pre>

<p>What just happened?</p>

<p>Well, we connected to the registry, and then we said “When someone asks for ‘serviceone’ with
a version of ‘0.0.1’, then you can direct them our way.” The seaport then gives you a port number
and you use that in your server.</p>

<p>Let’s now say that Service Two is on a different physical machine. The seaport is on a server
named “kahleesi” while Service Two is running on “katniss”. So first connect to the seaport
server:</p>

<pre><code>... stuff ...
var seaport = require('seaport').connect('kahleesi', 9001, {secret: 'totallysecret'})
var port = seaport.register('servicetwo@0.0.1')
... actual server ...
</code></pre>

<p>Now that we have the services all talking to each other… what now?</p>

<h2 id="url-routing">URL Routing</h2>

<p>Let’s say your web services only use straight up, request/response, HTTP. No
websockets. And you aren’t allowed to have multiple hostnames for some reason.</p>

<p>You might be tempted to use <a href="https://github.com/substack/bouncy">bouncy</a> and under other
circumstances, I would agree. If you can use vhost style routing, then bouncy is the
perfect solution to your problem.</p>

<p>The problem here is that without hostname differentiation,
the client browser will only get the socket once. This means routing by URL won’t work.
Or at least, it will seem to work until you try to open another tab and go to a different
URL on that same host… then you’ll realize that bouncy is connecting the socket directly
and once it does that it doesn’t look at it ever again so it has no idea you wanted something
different. Kind of a nightmare.</p>

<p>So… we build a proxy. In other languages, let’s say “lesser” languages, building such
a proxy would be hard work.  But in node.js it is really easy.  Here’s how I did it.</p>

<p>First we will create a combination seaport/http proxy server so that it can all be
combined into a single process.</p>

<pre><code>var http = require('http')
var seaport = require('seaport')
var argv = require('optimist').default('p', 8080).argv

var ports = seaport.createServer()
ports.listen(9001)

var server = http.createServer(function(req,res) {
  if (/^\/serviceone/.test(req.url)) {
    var service = 'serviceone@0.0.1'
  } else if (/^\/servicetwo/.test(req.url)) {
    var service = 'servicetwo@0.0.1'
  }
  
  if (service) {
    // Here's where we ask seaport if it knows about this service
    var ps = ports.query(service)
    if (ps.length === 0) {
      res.end("No Service Available")
    } else {
      // At this point, ps is an array of host,port that can respond to these requests
      // I'm just going to take the first one...
      
      // Here's the actual proxy stuff
      var opts = {host: ps[0].host, port: ps[0].port, method: req.method,
                  path: req.url, headers: req.headers}
      var proxy = http.request(opts)
      proxy.on('response', function (response) {
        response.on('data', function(chunk) {
          res.write(chunk)
        })
        response.on('end', function() { res.end() })
        res.writeHead(response.statusCode, response.headers)
      })
      req.on('data', function(chunk) { proxy.write(chunk) })
      req.on('end', function() { proxy.end() })
    }        
  } else {
    // Well, we have no idea what they want
    res.end("Whatever, dude.")
  }
}).listen(argv.p)
</code></pre>

<p>I don’t know if you’ve ever tried to write an http proxy by hand before, but in most
other langauges it takes a lot more work than this.</p>

<p>Basically, we are taking their request, looking for where the “real” server is, and
then creating a new request with the host and port of the “real” server and then
returning the response back to the client.  NONE THE WISER.</p>

<p>We just hook into the <code>data</code> and <code>end</code> events and just rewrite stuff. It’s pretty
straight forward.</p>

<p>This way it doesn’t really matter how many services, or even if you have different
versions, or whatever. You can just route to your heart’s content based on any
criteria you want. You have the full request and headers to play with, so you can
make up whatever rules you can code in javascript.</p>

<p>Have Fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using NPM Like a Boss]]></title>
    <link href="http://darelf.github.io/blog/2014/04/22/using-npm-like-a-boss/"/>
    <updated>2014-04-22T13:50:43-04:00</updated>
    <id>http://darelf.github.io/blog/2014/04/22/using-npm-like-a-boss</id>
    <content type="html"><![CDATA[<p>So I have to keep track of what I work on each week and send
out an email with a short description of each. Yeah. You know.</p>

<p>I thought “What a great idea for making a script that handles all
that with a simple command line!” I hear you mumbling “nerd”. That’s
OK. I can take it.
<!--more-->
## Enter… The Script</p>

<p>Well, I just need a list, each list can live in a text file that I
can then email to my boss each week. What do I need?</p>

<p>Very little. I use <a href="http://momentjs.com">moment</a> to figure out what
week I’m working on automatically and store it in the correct file.
I also use <a href="http://github.com/substack/minimist#minimist">minimist</a> to do
command line parsing since I barely need anything there.</p>

<p>So the beginning looked like this:</p>

<pre><code>var fs = require('fs')
var moment = require('moment')
</code></pre>

<p>Then I realized I (or someone) might want it daily, so I add a
default. And while I’m at it, let’s define a working directory
for the files.</p>

<pre><code>var defaults = { weekly: true, workdir: process.env.HOME + '/worklist/' }
var argv = require('minimist')(process.argv.slice(2), {default: defaults})
</code></pre>

<p>You could override those, for instance with <code>--workdir=/my/crazy/directory/</code> but
hopefully these are sane defaults.</p>

<p>Now let’s figure out what file we should be working with:</p>

<pre><code>var m = moment()
if (argv.weekly) {
  m = moment().startOf('week').add('days', 1)
}

var fname = argv.workdir + m.format('YYYY-MM-DD') + '.txt'
</code></pre>

<p>The file name will now have the date, or Monday’s date when we are doing weekly
files. This let’s us choose.</p>

<p>Next we read in the file, if it exists, and parse the contents:</p>

<pre><code>var contents = []
fs.readFile(fname, function(err, data) {
  if (!err) {
    contents = data.toString().split('\n').filter(Boolean)
  }
  parseCommands()
})
</code></pre>

<p>That <code>parseCommands()</code> function will need to be defined. It’s basically the
entry point for looking at any command the user sent and taking the correct
action. I decided I only needed 3 commands:  list, add, and delete.</p>

<pre><code>function parseCommands() {
  if (argv._.indexOf('list') &gt; -1) {
    contents.forEach(function(v,i) { console.log("%d: %s", i, v) })
  }
  if (argv.add) {
    contents.push(argv.add)
    saveContents()
  }
  if (argv.d) {
    if (contents.length &gt; argv.d) {
      delete contents[argv.d]
      saveContents()
    }
  }
}
</code></pre>

<p>What we have going on here is a <code>list</code> command that just dumps the contents.
Next, we have a <code>--add="This is the item to add"</code> command that will add
a single line to our file, and then it will save the file. (see below for that)
And finally the <code>-d #</code> command that takes the number of the item to delete.</p>

<p>Not really pretty, but since I’m mostly just adding and listing, it seems
to work just fine. And since the files are just text files, I can always
edit them by hand, feed them into other programs or utilities easily, and
generally use any of my typical Unixy workflows.</p>

<p>Oh, and saving the file just looks like this:</p>

<pre><code>function saveContents() {
  fs.writeFile(fname, contents.join('\n') + '\n')
}
</code></pre>

<h2 id="enter-npm">Enter… NPM!!!</h2>

<p>How does the <code>npm</code> utility enter in to this? I’m glad you asked!</p>

<p>NPM has a facility called “bin” in the <code>package.json</code> file that allows you
to define so-called <code>binary</code> programs to be installed. In my case, this is
just a node js script as shown above.</p>

<p>What steps do I take to make this work as a command? I.e. <code>worklist list</code> or
<code>worklist --add="I totally did important work just now"</code></p>

<h3 id="step-one">Step One</h3>

<p>Add the “shebang” at the beginning of the script telling it to use node.</p>

<pre><code>#!/usr/bin/env node
</code></pre>

<p>For the script, that’s it.</p>

<h3 id="step-two">Step Two</h3>

<p>Add the entry into <code>package.json</code> telling it that the script is a binary.
For our example, I put the script in <code>./bin/worklist.js</code> so that’s what I
will tell NPM. Also, I need to tell it what I want the command to look like,
which in this example is <code>worklist</code> so that I can just type <code>worklist</code> on the
command line and it will run my script in node automatically.</p>

<pre><code>{
  ... bunch of normal package.json stuff ...
  "bin": {
    "worklist": "./bin/worklist.js"
  }
}
</code></pre>

<h3 id="step-three">Step Three</h3>

<p>Install it globally.</p>

<pre><code>npm install -g
</code></pre>

<p>You will notice NPM telling you that it is linking the script into your path
somewhere. I believe on Windows that this also automatically wraps it in a
<code>.cmd</code> for you. WIN.</p>

<h3 id="step-four">Step Four</h3>

<p>Pour a hot cup of coffee, light up your favorite cigar, and enjoy. THIS STEP
IS NOT OPTIONAL.</p>

<h2 id="feedback">Feedback</h2>

<p>Please, please, please, send me feedback, ask me questions. Yeah. You can do it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazarus - Yo Ho]]></title>
    <link href="http://darelf.github.io/blog/2014/04/14/lazarus-yo-ho/"/>
    <updated>2014-04-14T12:32:30-04:00</updated>
    <id>http://darelf.github.io/blog/2014/04/14/lazarus-yo-ho</id>
    <content type="html"><![CDATA[<p>Life no longer gives me lemons. Not after what happened the last time.
<!--more-->
There had been an agreement made to help hunt down and defeat one of the
pirate captains. This was in exchange for the location of a buried treasure.
Partly completed, I think, because Captain <del>Mars</del> Deeds thought
that the treasure itself is actually a myth. Or at least that it’s impossible
to get at it.</p>

<p>So we all truck out in pursuit of this guy’s pirate ship. A short bit of naval
maneuvering goes on while some fire is exchanged, and eventually we latch on
and can head across to the enemy ship.</p>

<p>This may be my first experience with this group where entrance into the battle
happened exactly as planned. Bravo.</p>

<p>We quickly set up a permieter of fighters, with our mage and archer protected.
An enemy archer distracted for a short time such that we couldn’t bring the
full force of our long range attack on the foot soldiers.</p>

<p>However, the battle quickly evolved as the enemy brought in air support and
additional reinforcements. Our bubble of steel pushed out a bit to try and
reduce the enemies area effect attacks, and we slowly chewed through them.
I spent my time dashing around the battle field, distracting enemy troops,
dispensing the blessings of Calistria, healing, and basically being a
nuisance to the foe.</p>

<p>The tide began to turn, and I unleashed my fury upon the enemy archer. She
was delicious. At that point, with the enemy in full retreat, our soldiers
managed to prevent the leader from escaping. While he tried to surrender like
a little baby, the warriors were having none of it and despatched him quickly.</p>

<p>Having secured the location of the treasure, and having finally tasted the
fruits of working in concert, we are prepared to face whatever dangers are
guarding the lost treasure of Angus.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evented]]></title>
    <link href="http://darelf.github.io/blog/2014/04/09/evented/"/>
    <updated>2014-04-09T13:06:49-04:00</updated>
    <id>http://darelf.github.io/blog/2014/04/09/evented</id>
    <content type="html"><![CDATA[<p>One of the big advantages of <a href="http://nodejs.org">node.js</a> is that of events and
an emphasis on asynchronous programming.
<!--more-->
It is almost a given, at this point, that if you learned all your programming
from college, you probably didn’t learn how to write asynchronous functions. In
fact, you were probably warned away from dealing with things that were asynchronous
directly. Instead using pre-packaged frameworks that exposed asynchronous things
( like I/O ) as if they were synchronous, solving your problem for you.</p>

<p>That’s fine. But node.js don’t truck with that.</p>

<p>If you are going to do something in node.js, you need to deal with asynchronous
functions. You need to create functions that can be called asynchronously, and that
play well in that kind of ecosystem. Here are a few tips to help you make the
transition from one to the other.</p>

<p>** Problem - Big File</p>

<p>You have to create many millions of rows of data and output them to a file. You
can’t keep the whole file in memory and write it all at once. You may have infinite
time but you don’t have infinite memory.</p>

<p>Step one is to have a function that creates a row of data.
    function makeOneRow(item) {
      // do something fancy
      return rowOfData
    }</p>

<p>Step two is to create a writable stream. For our purposes, we say a file, so we can
use the <code>fs</code> module.
    var fs = require(‘fs’)
    var outputFile = fs.createWriteableStream(‘name-of-output-file.txt’)</p>

<p>Step three is to loop through your list of items to create and write them to the file
    listOfItems.forEach(function (item) {
      outputFile.write(makeOneRow(item))
    })
    outputFile.end()</p>

<p>“Wait a second!” I hear you exclaim. “What if the makeOneRow() is also asynchronous?”
Maybe the call that makes a row has to call the database, which is almost certainly an
asynchronous call. In this case, we would quickly crash.</p>

<p>One solution to this problem is my favorite: events. The stream functionality that is
available in node.js makes events a natural choice for this. Let’s say for the moment
that creating a row takes a database call that uses a callback.</p>

<pre><code>function databaseCall(item, callback) {
  // do database stuff and store results in processData variable.
  callback(processData)
}
</code></pre>

<p>What do we do with this callback? Well, if we are using events we need a javascript
object that is an <code>EventEmitter</code>. So let’s create one real quick.</p>

<pre><code>var util = require('util')
var events = require('events')

function MyObject() {
  events.EventEmitter.call(this)
}
util.inherits(MyObject, events.EventEmitter)

var myobject = new MyObject()
</code></pre>

<p>Ok. What does this give us? Well, it gives us an object that can call <code>emit</code> in order
to send out events to listeners. So let’s adapt our function that makes items to use it.</p>

<pre><code>MyObject.prototype.makeOneRow = function(item) {
  var self = this
  databaseCall(item, function(processData) {
    self.emit('data', processData)
  })
}
</code></pre>

<p>Now all we have to do is listen for data events and write them to the file. The other
thing is calling only one of these at a time, since we care about the order that
things get written to the file. So when listening for the ‘data’ event, check if
you have more items, and if you do then ask for another one.</p>

<pre><code>function doOne() {
  var nextItem = listOfItems.splice(0,1)
  myobject.makeOneRow(nextItem)
}

myobject.on('data', function(newdata) {
  outputFile.write(newdata)
  if (listOfItems.length &gt; 0) doOne()
})
</code></pre>

<p>Even better would be to allow the object to keep track of how many items, and send
an ‘end’ event when it reached the end. I’ll leave that as an exercise. (You gotta
learn to do it yourself eventually, right?)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazarus - Tactics]]></title>
    <link href="http://darelf.github.io/blog/2014/04/07/lazarus-tactics/"/>
    <updated>2014-04-07T09:01:00-04:00</updated>
    <id>http://darelf.github.io/blog/2014/04/07/lazarus-tactics</id>
    <content type="html"><![CDATA[<p>There’s some sort of northern barbarian that hangs out in Mae’s group. Odd fellow.
Keeps to himself mostly. At first I thought he didn’t speak the language, until
he went into a semi-furious rant about some vision he had.
<!--more-->
Unfortunately, the vision was of the assassin cult of Norgorber. Those guys. You
know, one of the groups that if you leave them alone they usually leave you alone.
But apparently, this Pike (or Pickaxe, maybe?) fellow crossed them somehow, or maybe someone put out a
contract on him (though I hadn’t heard about it). Whatever the reason, he was in
deep, and these assassins are pretty sneaky; you never know who they are.</p>

<p>We staked out their hideout for a few days until we saw they were having a meeting.
Then we quickly discussed tactics.</p>

<p>Now Mae’s guards, the three ex-soldiers, seem to be a little light on tactics.
(That may be why they are “ex”. That or sleeping on duty seems just as likely)
However, they did manage to have a single stray thought about possible alternate
escape routes for the enemy. But then, instead of actually securing the exit,
instead they sent the pirate Dripstain to take care of it. And he “took care of it”
by drinking and having a piratey good time, and then watching calmly while several
of the enemy escaped.</p>

<p>When asked, he said something like “Oh, you wanted me to stop them? I.. I didn’t
know that. I just assumed you wanted me to drink and wench and observe any
of them coming out of the basement. Which I did! Especially the first two items!”</p>

<p>“How many, Dripstain?”</p>

<p>“Oh, maybe three or four. Or maybe it was only one. I was in my fifth cups by
then, and Stacey’s ample bosom was blocking some of my view. Plus I was trying to
keep an eye on Jessica, since I thought she might be in on it what with the way
she was swaying her hips at me constantly. Definitely, probably
at least one of the assassins got away.” (I’m paraphrasing here, but you get the idea)</p>

<p>Meanwhile, with Assisstant Vice Cabin Boy busy, we were laying into the enemy pretty
heavily. Not being a group very good at making our way down corridors, we of course
got completely tangled up just getting into the place, tripping over each other.</p>

<p>Mae got the high ground on some barrels to light up the room with arrow fire.
Eventually we got untangled and went face first into assassins, fire elementals,
and giant scorpians. It was invigorating.</p>

<p>The frustration with the entire affair of just getting in the door made me cranky.
I vaguely remember eating a man’s heart. It happens sometimes. After that, of course,
everything is a bit fuzzy since I was high as a kite on lifeblood.</p>

<p>Maybe next time we can have a little better organization on getting through the door.
I know. Baby steps, baby steps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Programming]]></title>
    <link href="http://darelf.github.io/blog/2014/04/02/simple-programming/"/>
    <updated>2014-04-02T08:19:57-04:00</updated>
    <id>http://darelf.github.io/blog/2014/04/02/simple-programming</id>
    <content type="html"><![CDATA[<p>“All that is complex is not useful. All that is useful is simple.” – Mikhail Kalashnikov</p>

<p>“A scientific theory should be as simple as possible, but no simpler.” – Albert Einstein</p>

<p>Ran into this problem recently. It’s very difficult to deal with programmers sometimes,
as they tend to very often be right in the face of naysayers, they get used to it and
just assume that their way is right even when it’s obviously wrong.
<!--more-->
Programmers fall for the same failings of the rest of humanity, such as resisting change,
or taking perverse pride in something they did even when that thing is awful. I hear so
many times from people that they “worked so hard” on something. And I think, “But that
something you worked hard on is horrible, you should not be proud of it or resist replacing
it with something good.” (I have rather lengthy internal monologues sometimes)</p>

<p>The big issues when code gets complex center around maintainability. That extends both to
bringing in new programmers on a project, as well as revisiting code that you have written
in the past. It also affects interoperability. Simple interfaces are better than complex
ones. As simple as possible while still accomplishing all the goals.</p>

<p>So, if you are familiar with one tool and you start using it to solve a problem that it
is not designed for, you will inexorably end up with a much more complex system than
necessary. If you use techniques that aren’t tailored to the task at hand, you will
have the same problem.</p>

<p>Choices in programming should be made by programmers not by business decisions. Goals
and products should be chosen by business not by programmers. Once you start mixing, you
end up with a horrible mess that is far more costly and a nightmare to maintain. When
business makes the decision on programming language, techniques, etc. you are headed into
the dystopian realm of ill-functioning, difficult to maintain software.</p>

<p>“But it’s easier to hire Java (or insert other horrible languages) programmers…”
I hear you cry. First, I call BS on that on its face. Second, you don’t want programmers
that are easy to hire. That’s like saying it’s easier to hire unskilled laborers.
Of course it is. There’s a reason for that.</p>

<p>Advice is only as good as the people taking it.</p>

<p>When we say “make it simple”, we mean also “make it work and work well”. Don’t over-simplify,
but choose the right tool and the right techniques and make it as simple as it can be.
Make code easy to reason about. Make it easy to extend. Make it easy to integrate. Make it
easy. Simple is easy. Complex is hard.</p>

<p>Just because you haven’t encountered a technique before doesn’t mean it’s hard. If you
look at something like <a href="http://en.wikipedia.org/wiki/Bitmap_index">WAH</a> or CONCISE it may look
difficult and complex at first, but it’s really rather simple. Honestly, when you realize
that half the compression is simply packing and run length encoding it’s very easy to
grasp, and importantly easy to reason about.</p>

<p>Keep code simple. Keep inter-process interfaces simple. Keep APIs simple. Make the so-called
surface area easy to grasp, easy to reason about. Keep it easy to maintain, easy to upgrade,
easy to extend. You can’t see all futures, but if you make the code simple it will be
easier to adapt to new and changing environments.</p>

<p>If you don’t, you are inviting trouble for yourself and others. You are the Causer of
Problems. Don’t be the bad guy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazarus - the Not Dead]]></title>
    <link href="http://darelf.github.io/blog/2014/03/24/lazarus-the-not-dead/"/>
    <updated>2014-03-24T10:56:55-04:00</updated>
    <id>http://darelf.github.io/blog/2014/03/24/lazarus-the-not-dead</id>
    <content type="html"><![CDATA[<p>Having gotten themselves banned from the city, the adventuring group led by Mae approached the
walls with not a little trepidation. Unfortunately, the Red Mantis had a use for the group and
offered to clear their names in exchange for some help. This was obviously not going to play to
my advantage. The Mantis are constantly interfering, the meddlesome brats.
<!--more-->
Help from adventuring groups is usually of the “kill it until it is dead” variety, and this one
was no different. Apparently, the necromantic pirate lady ( I think her name was Necrophilia, or
something? ), had one of her ships occupying the harbor. Who knows why. Certainly for some
nefarious purpose, but which exact type of nefary was unclear.</p>

<p>What was clear, was that a ship full of the not-quite-dead was blocking the harbor from the
wholly legitimate and upright citizens of Ilizmagorti. <em>cue eye roll</em>. So, they bundled us onto
a barge, basically keel-hauling us into doing their dirty work, and so we had not much choice
other than to clear out the undead and sink the ship.</p>

<p>Which brings me to the question of loot. Loot? What loot? I see no loot here. I see no reward for
sinking the ship. I see no upside at all. The pirates should have cleared it out, since they are
the ones for whom the main use and advantage of the harbor is.</p>

<p>Regardless. Dripstain the Pirate God certainly showed his value in sea-going situations. He charged
every enemy, fought from the front and generally energized the entire affair. His pure, piratey
enthusiasm infected the whole group, and everyone got caught up in the Swash and Buckle. It was
a fascinating excursion, from that point of view.</p>

<p>Also, I don’t particularly like undead. They are irritating. They suck the souls out of people,
and reduce them to at best wasted husks, and at worst convert them to their undead cause. Which
cause is entirely depressing. I assume most undead are cutters by nature, all sad on themselves,
blaming their parents, etc. If they had hair it would naturally fall in their face and be dyed
black. Whatever. I prefer a more energetic lifestyle.</p>

<p>At least we got to sink a ship by setting it on fire. That’s always fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exposition]]></title>
    <link href="http://darelf.github.io/blog/2014/03/24/exposition/"/>
    <updated>2014-03-24T09:29:28-04:00</updated>
    <id>http://darelf.github.io/blog/2014/03/24/exposition</id>
    <content type="html"><![CDATA[<p>There’s a very well known saying in writing: “Show, Don’t Tell”. I’m sure you’ve heard
it, either in some class or in a book on creative writing. The other famous saying comes
from screenwriting, “Exposition = Death”, meaning it sucks all the drama out of a scene
and bores your viewers.
<!--more-->
We’ve read a lot of pro and con on this, and a lot of misunderstanding and overly literal
interpretations of this particular piece of advice. There’s a lot of “you have to tell
something!” kind of response, and the other extreme of “only imply!”.</p>

<p>Good writing is obvious when you read it. The non-obvious is how good writing happens.
That’s where we run into all kinds of problems, and different authors have different little
phrases or mnemonics that help them move their storytelling toward good from wherever they
are.</p>

<p>For instance, Orson Scott Card will tell you that you need exposition. But that’s because
he needs to be reminded. Most writers have the exact opposite problem and need to be disciplined
away from excessive exposition. New writers can easily get confused by all the advice, and
end up learning all the wrong things. And then, once habits become ingrained you end up with
a decent writer who has a huge hole that brackets out any chance for greatness. (I’m looking
at you George R.R. Martin)</p>

<p>So in the famous screenwriter aphorism “exposition = death”, what is it about that bit of
advice that we can glean? What does “exposition” even mean in the context of “show, don’t tell”
that will help lead us to better storytelling (whether novels or screenwriting or whatever)?</p>

<p>First, a nice definition of exposition: “a comprehensive explanation”. Now, for many people
that’s really all you need to know in order to understand why you ought to never use exposition.
But, we’ll go a little further. (BTW, this article is exposition)</p>

<p>So what about “comprehensive explanation” means bad storytelling? Any time every thing about
a character, place, event, etc. is thoroughly explained, you have two of deadliest poisons
to storytelling: boredom and lack of mystery. Hemingway’s famous “Iceberg Theory” captures this
concept, where the bulk is “below the water line”.</p>

<p>Most importantly, a lack of mystery means you have left nothing to the reader/audience. You
despise them. You think they are stupid. You are being an arrogant prick. Exposition is for
learning, classrooms, sermons, etc. it is not for storytelling. When you explain something in
detail you have taken all the story out of the storytelling; now you’re just telling.</p>

<p>For serial entertainment, you have just killed your story. In a TV show, since we now know
everything about a character the show is over. We know everything about the main background of
the setting, there’s nothing left. Anything you do now will be boring, since there is nothing
new or interesting, there’s no real mystery, no revelation is now possible since you have
just told us everything.</p>

<p>In a movie, you have not only foreclosed on sequels, you have delivered what will be termed
by the audience “unsatisfying”, “disappointing”, “worst ending ever”. There’s nothing left,
meaning the audience can take nothing with them; it’s all left at the theatre. Another word:
“unmemorable”. There’s nothing for you to think on, so the story will quickly be forgotten.</p>

<p>If you want to write boring, forgettable, cliche driven stories it’s very easy. Just have
the characters and setting be comprehensively explained. No matter how deep the characters
are, if they are fully understood by the audience they will be regarded as “shallow”. When there
is no mystery left, everyone is bored, and everyone will move on and stop thinking about it,
and you and your writing will be forgotten. Which is justice.</p>

<p>The universe hates exposition.</p>

<p>This is not to say that there should never be any “telling”. But an explanation is not an
exposition. If you give a bit of background information well, you are not giving exposition
though you are certainly “telling” part of the story in order to give context. That kind of
telling is perfectly normal, and part of regular dialogue in real life as well, so it comes
across as natural.</p>

<p>You will know when you have done the storytelling around a character correctly when discussions
about the “true motives” or “what was that event all about” pop up. When the audience has
many different takes on what the expository meaning of the story is, then you know you
haven’t given too much away.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Synchonization]]></title>
    <link href="http://darelf.github.io/blog/2014/03/18/data-synchonization/"/>
    <updated>2014-03-18T09:40:31-04:00</updated>
    <id>http://darelf.github.io/blog/2014/03/18/data-synchonization</id>
    <content type="html"><![CDATA[<p>Data. Always getting out of sync. You’d think it would learn. You’d think that
maybe if you tightened up your code it would never get out of sync.</p>

<p>Well. Data don’t care what you think. That’s why CRC, etc.
<!--more-->
At a high level, though, it’s very easy to see why data needs to be synchronized
and how it can get messed up. Two people updating a spreadsheet separately can
easily end up with two different versions, and then needing to synchronize them
(aka merge).</p>

<p>What are some of our options? Glad you asked.</p>

<p>One of my favorite ways of making it work is “append only”. That is, you can never
delete anything, you can only add to it. This makes synchronization easy. You just
ask if they have any items you don’t have, and that’s it. Synchronized.</p>

<p>Updates are also fairly easy. Each record having a time it was last updated, or
a sequence number or whatever, and you can just ask for the latest versions. Again,
that’s pretty much a snap.</p>

<p>What about deletes?</p>

<p>Ah. Well, this is only slightly more complicated. In this case, what you really need
is a “history”. This history can actually just be items that were deleted. The
simplest design, of course, is to have each record have a sync field (either a
sequence or a timestamp) and also have a “tombstone” or list of items that were
deleted. You don’t even need to know when, necessarily, if a given id can never
be reused.</p>

<p>If they can be reused, then you need to also include the sync field in the history,
that way something might be “brought back to life” later. This kind of necromancy
is not uncommon in many systems.</p>

<p>So, what do we have? Well, in order to keep multiple copies of the same data in
sync with each other efficiently (that is, not just checking every line and
replacing the whole dataset), a system should have: a history that lists the latest
version of each item with a synchronization field of some kind, such as a
monotonic timestamp, and the action of ‘created’, ‘updated’, or ‘deleted’.</p>

<p>One of the issues is with timestamps. If you need to synchronize in real-time
between multiple nodes that share data, and you have a high rate of operations,
your timestamps will probably cause you issues. The issues are directly related
to the same problem of keeping two clocks in sync. When you have multiple
processes on different machines doing multiple updates per second each, you are
going to have to come up with some scheme for ordering them.</p>

<p>This can be important for updates/deletes, depending on how you structure things.
Very often, the solutions end up being a combination of timestamp, process name,
and a sequence number. There are many different approaches, but they all follow
the same pattern. A decent approach, if you are satisfied with “rough” ordering,
would be something like <a href="https://github.com/twitter/snowflake">Twitter Snowflake</a>.</p>

<p>But don’t stop there. There’s a lot to learn about this topic, and it is
fascinating in and of itself.</p>

<p>Warning: make sure you don’t over-engineer your solution. If you are only worried
about synchronizing data that gets updated hourly or daily, then don’t overthink
it and come up with some really complicated system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distributed Jobs]]></title>
    <link href="http://darelf.github.io/blog/2014/03/11/distributed-jobs/"/>
    <updated>2014-03-11T13:12:33-04:00</updated>
    <id>http://darelf.github.io/blog/2014/03/11/distributed-jobs</id>
    <content type="html"><![CDATA[<p>This post is supposed to be about network queuing of jobs that can be
distributed into discrete tasks which themselves can be completed in
any order. And about the boiled down <a href="http://github.com/darelf/stream-queue">stream-queue</a>
npm package that I have published. I will diverge just a bit here to
talk a little bit of background.
<!--more-->
STREAMS. Just think about that. Streams. Think of all the things it implies
in programming to talk about streams and streaming.</p>

<p>Probably number one is networking, that is TCP (or whatever) network
sockets that are read/write and have very well-established, at this point,
semantics. Open, close, pause, end, read, write, etc. Depending on the
exact stream, of course, things may be slightly different, and we’ve seen
quite a lot of semantics built on top of streams.</p>

<p>Nodejs, of course, does networking really well. In fact, that may be the
number one purpose for most programmers using it. It’s just really
fantastic at networking. Your code can worry about what goes on just
above the socket level, with the streams. They also give you an
abstraction, so that there are file streams, etc. helping you out.</p>

<p>This is all fairly normal in programming, and streams have been around
for a long time. UNIX pipes are probably the most common stream-semantic
thing that programmers use, but they are everywhere in just about every
language that’s of any use.</p>

<p>So…</p>

<p>Back to jobs. If you have a big job that can broken down into discreet
tasks such that those tasks can happen in any order, you have something
that can be distributed. And by distributed, I mean among separate processes,
each process accomplishing one of the tasks towards the goal of completing
the job.</p>

<p>What <code>stream-queue</code> is designed to do is give the basic functionality of
a distributed queue that I needed. I need to have it manage the list of
tasks, how many total tasks there were at the beginning, how many have
been completed and how many are left to do. It needs to notify me of
when it starts, when it ends, and each time a step is taken on the way
(progress).</p>

<p>These are all straightforward. They need to not depend on time. That is,
having a unique timestamp should not be required, seeing as how there
might be many workers concurrently processing tasks, and some will inevitably
happen at the same timestamp.</p>

<p>The workers should be able to spin up or shutdown without consequence to
the working of the queue as it is in progress. One future upgrade to the
<code>stream-queue</code> package will be the ability to re-do a task if a worker
gets shutdown before completing the task. Also, having a standard semantic
for asking the queue to shutdown one of its workers, either simply to
reduce the load, or possibly even by name.</p>

<p>Others might be the ability to manage multiple kinds of workers, and
have those workers advertise the kind of work they can do and let the
queue manager distribute jobs accordingly.</p>

<p>So that’s where it’s at. A lot of interesting tweaks to be made, and a
lot of progress towards better features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazarus - Business]]></title>
    <link href="http://darelf.github.io/blog/2014/03/10/lazarus-business/"/>
    <updated>2014-03-10T08:06:49-04:00</updated>
    <id>http://darelf.github.io/blog/2014/03/10/lazarus-business</id>
    <content type="html"><![CDATA[<p>There tends to be, in my experience, a certain bonding moment that
happens among a give group of adventurers. And it usually has to do with loot.
Whether gold or precious gems or magic swords.
<!--more-->
Once someone has shown they can bring the loot, and are willing and eager to
share the loot, many of their minor character flaws are suddenly overlooked.
Suddenly, they see the healing and the support in a new light. Suddenly all
of that now has a context. And that context is loot.</p>

<p>It’s good that we retrieved the hold relic. I’ll get some brownie points, Mae
and her band of adventurers will get paid.</p>

<p>Everyone seemed very excited about the dragon we met. More than you would
normally expect from a band of seasoned adventurers. It’s almost like they are on some
quest looking for a dragon, though this one turned out not to be what they
were looking for. It was a fun ride, I must admit. Seeing the dragon get at
all those dark dwarves was satisfying.</p>

<p>The drow are just as touchy as ever about visitors. Apparently they were
having some sort of picnic in the backyard and we were seen as crashing the
event. You know, we attempted to just quietly walk in, get the relic and walk
out, no fuss. We even went to the trouble to be invisible, and to not be a bother
by going in through the back, avoiding all the hoopla. Paragons of courtesy, we were.</p>

<p>Some people just can’t appreciate manners. Which is typical of drow. I mean, really,
sure I did execute a contract on one of them… that one time. And yes, I
did <em>technically</em> cut out her heart. And it is <em>obviously</em> true that I ate her heart.
And that may or may not have happened in front of her children – I honestly wasn’t
paying a whole lot of attention at that point, can you blame me? – but,
I mean, what else was I going to do? Not only was I getting paid, this was the
same drow that shortchanged me. The important take away is that if you claim that
there are fourteen potions of cure light wounds, and it turns out there are only
twelve… I mean, what do you expect is going to happen?</p>

<p>Also, I learned that I hate driders. I had only heard rumors, but the reality
is pretty horrible. At least horrible to face in battle.</p>

<p>Makes me regret not bringing more wine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wrap Those Web Sockets]]></title>
    <link href="http://darelf.github.io/blog/2014/03/04/wrap-those-web-sockets/"/>
    <updated>2014-03-04T10:59:10-05:00</updated>
    <id>http://darelf.github.io/blog/2014/03/04/wrap-those-web-sockets</id>
    <content type="html"><![CDATA[<p>Here’s the situation: You have a websocket-friendly routing infrastructure that
only has a single port available on each machine. (at least that you can use) But
you have some awesome client-server stuff that runs completely in the background
and is not really related to browsers or anything. You currently, and brilliantly,
have them speaking over regular node streams using the <code>net</code> functionality.</p>

<p>What to do?
<!--more-->
The routing structure only routes http requests. You can’t just redirect regular
socket connections.</p>

<p>WEBSOCKETS TO THE RESCUE!  Websockets are just sockets, but they are negotiated
over http. Oh yeah they are. So they can be routed by your infrastructure that
supports websockets. (like, say, <a href="http://github.com/substack/bouncy">bouncy</a>, but
there are plenty of other examples).</p>

<p>But you aren’t using a browser. There’s no browser here. Hmm.</p>

<p>You go check out <code>npm</code> and find out that maxogden has already solved your problem.
That’s what you do. He has already wrapped websockets with stream functionality in
a project he calls <a href="http://github.com/maxogden/websocket-stream">websocket-stream</a></p>

<p>Now your carefully designed code that leverages the node stream api can continue
on untouched simply by wrapping the websockets with this little gem.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazarus - New Beginnings]]></title>
    <link href="http://darelf.github.io/blog/2014/03/03/lazarus-new-beginnings/"/>
    <updated>2014-03-03T08:13:32-05:00</updated>
    <id>http://darelf.github.io/blog/2014/03/03/lazarus-new-beginnings</id>
    <content type="html"><![CDATA[<p>Journal Entry:</p>

<p>Mae is exactly as I remember her. Something about elves, probably.
<!--more-->
I convinced her to let me help out on some salvage mission. I don’t
even know what they were after. She didn’t leave with anything,
which was really odd behavior for her.</p>

<p>She has apparently hired some mercenaries. Fairly sure of themselves.
I haven’t seen them prove anything yet, but from the scars and scuff
marks they seem to have experience. Apparently, they are some sort
of local semi-celebrities.</p>

<p>I approve, at any rate. They have gathered up Merideth, and have
somehow conspired to protect her until they return to Sargava.</p>

<p>The after party was interesting, and Mae was completely in her element.
While everyone was discussing what to do about some young girl
that had gotten herself kidnapped, Mae slipped out, saved the
girl, came back and pocketed the reward money. Quest complete.</p>

<p>We were all still eating lunch. Classic.</p>

<p>With Mae’s help, I convinced her mercenary friends to help
bring back Merideth and to retrieve that artifact for Meron.
Let’s hope some of that muscle can be turned to good use.</p>

<p>Aowyn is still operating in the city. If I didn’t have a dozen other
priorities I would do something about that. I still may try to have
Mae acquire one of her poisoned weapons for me, kill Aowyn’s associate
with whom she seems to have some animosity, and leave the weapon to
be found with the body. Some guy named “Scurvyder” or something.</p>

<p>Sitting here in camp with some pervy merc named Marcandus or
Mercurius or something. Just one of those types who at very first
look makes you immediately suspicious. Maybe he’ll cozy up to the
camp follower we brought along. Isn’t that why we bring them, so
they can satisfy the odd inclination?</p>

<p>Speaking of which, why didn’t we think to bring some of the girls
from town? Why does this guy get to bring his own personal boy and
none of the rest of us get anything? This is ridiculous. I only
brought one bottle of wine, too. That’s not going to last.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazarus - Intro]]></title>
    <link href="http://darelf.github.io/blog/2014/02/28/lazarus-intro/"/>
    <updated>2014-02-28T13:39:17-05:00</updated>
    <id>http://darelf.github.io/blog/2014/02/28/lazarus-intro</id>
    <content type="html"><![CDATA[<p>Introducing Lazarus, Devoted to Calistria:</p>

<p><a href="http://imgur.com/YC7jIwg"><img src="http://i.imgur.com/YC7jIwg.jpg" width="150px" /></a>
<!--more-->
Left on a boat to the infamous Black Pearl of the Tropics. My kind of place.
Pirates, women, treasure, pirate women, wild adventure, women. It really has
everything a man could want. And quite a few other things besides.</p>

<p>While not a sea farer myself, I don’t mind the trip. Apparently, our valuable
“cargo” has crashed on the lovely shores of Mediogalti Island and has survived.
Could even be some of her guard is with her, though that’s not quite as important.</p>

<p>In fact, I’m sure it’s almost beside the point. Actually, I’d rather be walking
into a “lone survivor” situation and be the knight to rescue the exceedingly
appreciative damsel in stereotypical distress. Nevertheless, if any of her
barely qualified personal guard has survived, I suppose that would be fine.</p>

<p>This promises to be an exciting mission. In fact, I’ve been given permission
from Meron to charter an expedition for one of our lost relics that is
reportedly on the island. Two birds, as it were. Though hopefully there are
many more birds available as well. I might have to requistion some guides
from the wilderness whatever-they-call-themselves, but I have some amount
of funds from the temple to help offset any costs.</p>

<p>If only my favorite treasure hunter was available. It’s really too bad
about the guild. She would have loved to go on this expedition, since I’m
sure the payout would be plenty to cover her losses back in Sargava.
Unfortunately, I haven’t been able to find her. Oh well, more for me then.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No Comment]]></title>
    <link href="http://darelf.github.io/blog/2014/02/26/no-comment/"/>
    <updated>2014-02-26T12:57:37-05:00</updated>
    <id>http://darelf.github.io/blog/2014/02/26/no-comment</id>
    <content type="html"><![CDATA[<p>Taking out comments. Unnecessary.</p>

<p>If you need to contact me or have a comment about a post, send me an email.
Or use the twitter or google plus buttons on the post. I’m down. Down with
the twitters and plusai.
<!--more-->
Separating things into categories. That’s what I’ll be doing.</p>

<p>There should already be a <a href="http://darelf.github.io/blog/categories/programming">programming category</a>
which should have all of that stuff. If you are only interested in that
part, well, use that category.</p>

<p>I’ll be adding character posts about gaming. Right now doing Pathfinder,
so most of the posts will be about characters in that game. Don’t sweat it.
If you are only into the Pathfinder part, use the
<a href="http://darelf.github.io/blog/categories/pathfinder">Pathfinder category</a>
or if you want to know about a specific character, or what’s going
on in a specific game you can filter further by their categories.</p>

<p>That’s all for now. If you aren’t on <a href="http://plus.google.com">Google +</a> or
on <a href="http://twitter.com">Twitter</a> let me know; I can add different social
networks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Blocks]]></title>
    <link href="http://darelf.github.io/blog/2014/02/18/building-blocks/"/>
    <updated>2014-02-18T08:04:35-05:00</updated>
    <id>http://darelf.github.io/blog/2014/02/18/building-blocks</id>
    <content type="html"><![CDATA[<p>Modules. Oh, modules.</p>

<p>I’ve talked to so many programmers over the years, and the one thing I would suggest
to all of them is to rediscover modules. As opposed to frameworks.</p>

<p>Modules are the building blocks of application development. Keeping them out of
frameworks lets them breath and be more generally useful than if you bind them tightly
in chains. You can reuse modules over and over again, if they are well designed, in
many different contexts only if you emancipate them from the bondage of frameworks.
<!--more-->
What does that even look like?</p>

<p>Let’s take a quick overview look at a problem I needed to solve recently: I have a
very large list of items that need processing and each item requires multiple database
queries and even some file access. (large means in the millions)</p>

<p>What did I try?</p>

<p>Well, I tried just looping. That works fine on 10s of thousands of items, but the
asynchronous nature of the database kills that on larger sets. It just fills up the
space and crashes.</p>

<p>Next up was an in memory queue. This actually works, but it is slow. It is slow for
all the obvious reasons, but also because I’m using a single process, single thread
solution. This means I have to keep concurrency down because otherwise I will, again,
fill up the available memory or use up the available file handles. ( I actually tried
both the queue from the <code>async</code> module, as well as <code>queue-async</code>. The first would actually
work, while the second was so slow it wasn’t even worth pursuing any further. )</p>

<p>So that’s what didn’t work at the level of performance I wanted, and wouldn’t scale
anyway.</p>

<p>Network Queue</p>

<p>What I did was separate the problem even further. I started with an object that knew
how to process the individual items, and one that new how to get lists of items and
queue them up for processing. So I broke that up into a worker, a manager and a server.
This would allow me to scale up as many workers as I wanted, and even put them on
different physical machines if I wanted.</p>

<p>An aside: The good thing, seeing as this is node.js, is that a stream is a stream (for the most
part) and what I did to make it work over the network would just as likely work fine
over other kinds of streams.</p>

<p>Conceptually, there are four parts I considered vital to accomplishing this task (and
any similar task): Completely separate out the code that actually performs the task,
create a worker that only knows how to participate in the group, create a server that
communicates with workers and observers, and an observer that receives updates on what’s
happening.</p>

<p>The code that actually runs the task needs to be completely separated from the rest.
In this case, the task was to either delete a document or to create an updated document.
That’s all this code does, it knows how to get the information from the database and
update the index.</p>

<p>The code that manages the process keeps a list of workers, and list of observers. These
two lists are very lightweight wrappers around streams. It doesn’t need much information
about these, just needs the stream so it can send over information. It also keeps the
list of current items that need processing. It uses this to assign to the list of workers
items until it’s empty. The observers can request processing and can receive updates of
status.</p>

<p>The workers have a status (idle or busy) and can send update messages and receive request
to process items. That’s pretty much it.</p>

<p>The observer mostly just listens to the server waiting for updates. It can also request
that the entire grid work on a particular problem by sending a message. If no problem
is being worked on currently, then the manager will generate the list of tasks and
then start handing them out.</p>

<p>What’s underneath there?</p>

<p>Oh, that’s just <a href="http://npmjs.org/package/event-stream">event-stream</a> This thing kind of
does what you think. Or maybe not. It creates a pipeline of processing on streams. That
is, node js streams, which in my case means sockets. Basically it listens for <code>events</code>
on the <code>stream</code> and then takes the steps in the chain, possibly passing it back out to
another stream at the end.</p>

<p>It solves a problem I was going to have to solve anyway, since I wanted to use JSON
to communicate between the processes. This module has all of that, and does just that.
Meaning it takes care of the event streaming so I don’t have to, and doesn’t do a
whole bunch of unrelated, extraneous stuff that makes it unusable or terribly
interdependent. Basic solution of problem using standard interfaces.</p>

<p>In my case, I pass it the socket, split it and parse it (courtesy of <code>event-stream</code>),
and then do something with the parsed message. I throw away the data after I’m done,
since I don’t need to pass the messages on.</p>

<p>Ta-Da!</p>

<p>That’s all there is to it. Use modules. When designing solutions, design them in modules
and as you refactor make them generically useful if you can. When you use a modular
design you can keep swapping out parts of the implementation without hassle. Something
that can be frustrating if not impossible when using a framework.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Semver]]></title>
    <link href="http://darelf.github.io/blog/2014/02/07/semver/"/>
    <updated>2014-02-07T09:00:27-05:00</updated>
    <id>http://darelf.github.io/blog/2014/02/07/semver</id>
    <content type="html"><![CDATA[<p>Semantic Versioning. Hell yeah.</p>

<p>So here at work we finally settled on a versioning scheme. After literally
years of trying to push versioning in general, and semantic versioning in
particular, we are now implementing.
<!--more-->
What is “semantic versioning”?</p>

<p>In short, you know those version numbers you see on all those projects
on the internet with version numbers like 1.2.5 or 0.10.21? Yeah. That.</p>

<p>The problem semantic versioning is trying to solve is dependency. Meaning
that an application often depends on other software projects, and those
other software projects often are currently being developed, either to
fix bugs or add features/enhancements.</p>

<p>This can often be referred to as “dependency hell” since making sure of
which version of what you are using in a project can be a nightmare, taking
into account which set of features you depend on from different projects,
what those projects in turn depend on, etc. You need to distinguish between
a bug fix version increase, a feature add, or API breaking changes. Maybe
a new feature is one you want, or maybe you don’t. How do you tell which
version of a project you have?</p>

<p>More importantly, how do you communicate those decisions in the project
you are working on with both the other developers on your team (if any)
and to the consumers of your project?</p>

<p>In comes semver to save the day.</p>

<p>The basic idea of semver is this:  MAJOR.MINOR.PATCH</p>

<p>Additional labels, like ‘-musical’ or whatever can be added if things get hairy.
But the basic idea should serve.</p>

<p>The MAJOR part of a version is the basic feature set. That is, the API for
every version of that project that starts with the same MAJOR number should
not change. If version 1.0.0 has a function X that takes argument Y, then
that should also be the case for version 1.3.17 and 1.1.5 as well.</p>

<p>The MINOR part of a version are minor changes to the API. Maybe a new
function, or a change to the way a function works. But all of the existing
API at x.0.0 should still be there, even if the actual workings of those
may have changed.</p>

<p>The PATCH part of a version are bug fixes. These should not introduce new
functionality, but rather fix broken or incorrect functionality, or possibly
refactor internal workings without actually changing the input or output
of the functions.</p>

<p>How do we use this at work?</p>

<p>Now this is a specific case, and we are just now moving to use this. The idea
for us is pretty much as described above, however the movement is a little
more deployment specific than it is functionality specific. That is, the
version number, especially the MAJOR and MINOR numbers, will indicate what
deployment level this is at.</p>

<p>So, the MAJOR number will be the “this is in production” version. This is
the customer facing, being used in real work, version. 1.0.x will be in
production use, 2.0.x will be it’s successor, etc.</p>

<p>The MINOR number will be “features being tested”. So, 1.1.x will NOT be
in production use, but rather will be something that is being tested to
eventually be included in the 2.0.x version.</p>

<p>Again, that’s a specific case for us, and not really required by the
semver specification. We find that kind of structure useful for our purposes,
while I’m sure your project(s) will have different needs. The main reason
for this kind of versioning is to prevent problems related to what version
of which project is being used in a given context.</p>

<p>For more information on semantic versioning, you can check out their
<a href="http://semver.org">website</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactor]]></title>
    <link href="http://darelf.github.io/blog/2014/02/06/refactor/"/>
    <updated>2014-02-06T09:40:06-05:00</updated>
    <id>http://darelf.github.io/blog/2014/02/06/refactor</id>
    <content type="html"><![CDATA[<p>You’ve heard of refactoring. Wikipedia has a pretty good <a href="http://en.wikipedia.org/wiki/Code_refactoring">definition</a>.
You have probably done it. You may not have even known it.</p>

<p>I often think of refactoring as the primary job in programming. It cuts to the heart of
what this is all about, and the philosophy of programming in general. Refactoring code well
means being disciplined about code structure in the first place. It is the anti-spaghetti code.
It is the way in which we accomplish those ideals of “elegant” code.
<!--more-->
So, I thought I would give a recent example of something I worked on. It’s a small bit. Which
is the best kind, and goes to the point of the whole thing. The rule I live by is to reduce
the problem into smaller and smaller pieces until it is actually manageable.</p>

<p>My problem was filtering.</p>

<p>Specifically, filtering a list of javascript objects by some items in the keys. Easy one that.
Then, one of the filters needed to check for the existance of some key on some other list of
objects.</p>

<p>In the first pass of this, the filter function was written specifically to the problem we
were trying to solve. Here’s an example (although the objects were more complex than this):</p>

<pre><code>var array_1 = [{name: 'Joe'}, {name: 'Jane'}]

var array_2 = [{id: 1, name: 'Jane'}, {id:2, name: 'Jane'}]
</code></pre>

<p>So, the idea is to filter the first array to only include objects whose <code>name</code> attribute is
found in the second array. That is, if we run the filter on this sample, it should return this array:
<code>[{name: 'Jane'}]</code></p>

<p>Again, the first pass of this looked like this:</p>

<pre><code>var new_array = array_1.filter(function(v,i,a) {
    for (i = 0; i &lt; array_2.length; i++) {
        if (array_2[i]['name'] == v['name']) return true
    }
    return false
})
</code></pre>

<p>This is very specific. The name of the key, the fact that <code>array_2</code> needs to be in scope, these
all have to be true when running this. More importantly, such a function that looks for a
match in an array could be very useful in more than one context. It’s an obvious (some
would say blindingly so) candidate for refactoring.</p>

<p>Without much ado, here’s the refactored version of this that I can now use in other places
where I need similar functionality:</p>

<pre><code>function contains(a, key, value) {
    for (i = 0; i &lt; a.length; i++) {
        if (a[i][key] == value) return true
    }
    return false
}
</code></pre>

<p>Much better! Now I can call this function in order to determine if an array of objects
contains a value on a given key. It’s not perfect. And it’s specific to an array of
objects, and won’t work on flat arrays. It could be made even better or more generic,
though we begin at that point to enter the territory of trade-off value.</p>

<p>This version makes a lot of sense in the context of the application, as that application
uses quite a lot of arrays of objects.</p>

<p>It may seem like a small thing, and it is, but these kind of tiny little refactorings
over the course of an entire application will make the code better, more readable,
and more maintainable. ( The name <code>contains</code> is easy to read and understand what
it’s supposed to do )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmer Identification]]></title>
    <link href="http://darelf.github.io/blog/2014/02/04/programmer-identification/"/>
    <updated>2014-02-04T07:47:45-05:00</updated>
    <id>http://darelf.github.io/blog/2014/02/04/programmer-identification</id>
    <content type="html"><![CDATA[<p>Seems like people are complicated creatures. Sure. But we always seem to come back
to certain variables that we all latch on to when trying to identify each other
or to predict behavior. Gender, race, social class, politics, hobbies, etc.
<!--more-->
For the most part, these work as pretty good predictors, you can almost always tell
“if X then Y” and make fairly accurate generalizations.</p>

<p>We do this for a lot of reasons, but one is to find those that we would be
compatible with. In fact, a lot of the identifiers that we look for are usually
in relation to our own preferences and not some objective standard. So while, for
instance gender is an objective identifier, something like “goes to Starbucks a lot”
would be just as useful as an indentifier for social compatibility.</p>

<p>So, how do programmers/software engineers/developers identify possible compatibilities?
Outside of the standard ones, such as “wears sandles at all times” or “drives a Prius”
or “deeply and passionately believes that proper government can solve problems”, we
have to look at preferences that indicate something about that person.</p>

<p>Since, as I mentioned, this is kind of subjective, I will only be talking about things
that matter to me even in the smallest way, along with how important or useful an
indicator it is with “1” being not very useful at all, and “10” being apocalyptic.</p>

<h4 id="tabs-or-spaces---2">Tabs or Spaces - 2</h4>
<p>Spaces is the correct answer here.</p>

<p>Why so high as a 2? Well, there are two indications here. The first is that if you are
the kind of programmer who has never really considered which one is better and has
experimented with both to find what’s right for you, then that’s an indicator that we
probably don’t have much in common. In fact, that would be an even bigger negative
than choosing Tabs.</p>

<h4 id="functional-language---5">Functional Language - 5</h4>
<p>There are two main camps of good programmers. (I mean good in the sense of “good at
their job”). The ones who like math, and the rest of us.</p>

<p>I am not a mathemetician. I passed my classes, but have forgotten everything past
Algebra since I never use any of it in my line of work. This means that I generally
hate things like Lisp. And I’ve tried Lisp and Erlang and Scala and Haskell and others,
but just never got into them.</p>

<p>As xkcd once remarked they have “the flexibility and power of abstract mathematics
with the intuitive clarity of abstract mathematics”. Which is why I generally just
stay away from “functional” languages. I understand, by the way, why it’s called that
but I have a hard time viewing those languages as functional in the normal sense
of the word.</p>

<h4 id="command-line-or-ide---7">Command Line or IDE - 7</h4>
<p>This is a tough one, since in some circumstances an IDE is the most efficient.
But to make it a seven it has to be a preference for an IDE over command line, where
all other things are equal. That is, when editing HTML, you prefer Eclipse over Vi,
in which case we will just never get along.</p>

<p>When I bring new people in at work, we go over how to build the projects both at
the command line and using the Eclipse IDE. I lie to them and say it doesn’t matter
and use whatever you want. In reality, it does matter, and if they choose and
stick with the IDE, we generally don’t end up doing a lot of successful projects
together.</p>

<h4 id="single-language---10">Single Language - 10</h4>
<p>This is a ten because if you only program in one language, then I wouldn’t even
call you a programmer. As far as I’m concerned, you chose the wrong profession.</p>

<p>So….</p>

<p>This is just my brief list, and isn’t everything, and reflects my own biases.
Yet, we all use these kinds of things to varying degress to help us match up with
fellow programmers. Maybe one day we can come up with a system for helping match
programmers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Important Topics: Config File vs. Command Line]]></title>
    <link href="http://darelf.github.io/blog/2014/01/31/important-topics-config-file-vs-command-line/"/>
    <updated>2014-01-31T13:26:34-05:00</updated>
    <id>http://darelf.github.io/blog/2014/01/31/important-topics-config-file-vs-command-line</id>
    <content type="html"><![CDATA[<p>The eternal struggle rages on, and in today’s episode we bring you the
battle of configuration.</p>

<p>Every useful application is configurable. This is an axiom, a universally
accepted truth about programming. If a software application is to be useful
to a user of any kind, it must allow some way of specifying parameters that
modify its behavior.
<!--more-->
For instance, one of the simplest Unix programs of all time, <code>ls</code>, on my
Linux machine has over 50 separate command line switches that allow the
user to modify the behavior. And this is for a program whose sole purpose
is to list files.</p>

<p>The question is not whether a program should accept one or the other. That
way lies madness, since any given program should accept both. The question,
instead, is what should you use?</p>

<h3 id="configuration-files">Configuration files.</h3>

<p>The pro-config-file argument is compelling. Store your settings a single time.
Easier to run in cron or some other automation. Can be changed at any time,
not merely when the program is about to run. Comments in the file itself
can remind you what the options are for.</p>

<p>The cons for this are obvious. Mainly, if you run the program with different
options very often, editing a file is actually more work than changing the
switches.</p>

<h3 id="command-line">Command Line</h3>

<p>Easy. Allows you to quickly modify behavior between several rapid uses of
the same program. Help screen will generally tell you what you need to know.</p>

<p>Tedious if you have many options. Easy to forget if the times between running
the program by hand are very long. Easy to mistype.</p>

<h3 id="solution">Solution</h3>

<p>Where possible use both. Set your config file to your common and least-changed
settings, and use the command line for your often changing parameters.</p>
]]></content>
  </entry>
  
</feed>
