<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Blog from Darel]]></title>
  <link href="http://darelf.github.io/atom.xml" rel="self"/>
  <link href="http://darelf.github.io/"/>
  <updated>2014-02-04T13:40:47-05:00</updated>
  <id>http://darelf.github.io/</id>
  <author>
    <name><![CDATA[Darel Finkbeiner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programmer Identification]]></title>
    <link href="http://darelf.github.io/blog/2014/02/04/programmer-identification/"/>
    <updated>2014-02-04T07:47:45-05:00</updated>
    <id>http://darelf.github.io/blog/2014/02/04/programmer-identification</id>
    <content type="html"><![CDATA[<p>Seems like people are complicated creatures. Sure. But we always seem to come back
to certain variables that we all latch on to when trying to identify each other
or to predict behavior. Gender, race, social class, politics, hobbies, etc.</p>

<p>For the most part, these work as pretty good predictors, you can almost always tell
&ldquo;if X then Y&rdquo; and make fairly accurate generalizations.</p>

<p>We do this for a lot of reasons, but one is to find those that we would be
compatible with. In fact, a lot of the identifiers that we look for are usually
in relation to our own preferences and not some objective standard. So while, for
instance gender is an objective identifier, something like &ldquo;goes to Starbucks a lot&rdquo;
would be just as useful as an indentifier for social compatibility.</p>

<p>So, how do programmers/software engineers/developers identify possible compatibilities?
Outside of the standard ones, such as &ldquo;wears sandles at all times&rdquo; or &ldquo;drives a Prius&rdquo;
or &ldquo;deeply and passionately believes that proper government can solve problems&rdquo;, we
have to look at preferences that indicate something about that person.</p>

<p>Since, as I mentioned, this is kind of subjective, I will only be talking about things
that matter to me even in the smallest way, along with how important or useful an
indicator it is with &ldquo;1&rdquo; being not very useful at all, and &ldquo;10&rdquo; being apocalyptic.</p>

<h4>Tabs or Spaces &ndash; 2</h4>

<p>Spaces is the correct answer here.</p>

<p>Why so high as a 2? Well, there are two indications here. The first is that if you are
the kind of programmer who has never really considered which one is better and has
experimented with both to find what&rsquo;s right for you, then that&rsquo;s an indicator that we
probably don&rsquo;t have much in common. In fact, that would be an even bigger negative
than choosing Tabs.</p>

<h4>Functional Language &ndash; 5</h4>

<p>There are two main camps of good programmers. (I mean good in the sense of &ldquo;good at
their job&rdquo;). The ones who like math, and the rest of us.</p>

<p>I am not a mathemetician. I passed my classes, but have forgotten everything past
Algebra since I never use any of it in my line of work. This means that I generally
hate things like Lisp. And I&rsquo;ve tried Lisp and Erlang and Scala and Haskell and others,
but just never got into them.</p>

<p>As xkcd once remarked they have &ldquo;the flexibility and power of abstract mathematics
with the intuitive clarity of abstract mathematics&rdquo;. Which is why I generally just
stay away from &ldquo;functional&rdquo; languages. I understand, by the way, why it&rsquo;s called that
but I have a hard time viewing those languages as functional in the normal sense
of the word.</p>

<h4>Command Line or IDE &ndash; 7</h4>

<p>This is a tough one, since in some circumstances an IDE is the most efficient.
But to make it a seven it has to be a preference for an IDE over command line, where
all other things are equal. That is, when editing HTML, you prefer Eclipse over Vi,
in which case we will just never get along.</p>

<p>When I bring new people in at work, we go over how to build the projects both at
the command line and using the Eclipse IDE. I lie to them and say it doesn&rsquo;t matter
and use whatever you want. In reality, it does matter, and if they choose and
stick with the IDE, we generally don&rsquo;t end up doing a lot of successful projects
together.</p>

<h4>Single Language &ndash; 10</h4>

<p>This is a ten because if you only program in one language, then I wouldn&rsquo;t even
call you a programmer. As far as I&rsquo;m concerned, you chose the wrong profession.</p>

<p>So&hellip;.</p>

<p>This is just my brief list, and isn&rsquo;t everything, and reflects my own biases.
Yet, we all use these kinds of things to varying degress to help us match up with
fellow programmers. Maybe one day we can come up with a system for helping match
programmers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Important Topics: Config File vs. Command Line]]></title>
    <link href="http://darelf.github.io/blog/2014/01/31/important-topics-config-file-vs-command-line/"/>
    <updated>2014-01-31T13:26:34-05:00</updated>
    <id>http://darelf.github.io/blog/2014/01/31/important-topics-config-file-vs-command-line</id>
    <content type="html"><![CDATA[<p>The eternal struggle rages on, and in today&rsquo;s episode we bring you the
battle of configuration.</p>

<p>Every useful application is configurable. This is an axiom, a universally
accepted truth about programming. If a software application is to be useful
to a user of any kind, it must allow some way of specifying parameters that
modify its behavior.</p>

<p>For instance, one of the simplest Unix programs of all time, <code>ls</code>, on my
Linux machine has over 50 separate command line switches that allow the
user to modify the behavior. And this is for a program whose sole purpose
is to list files.</p>

<p>The question is not whether a program should accept one or the other. That
way lies madness, since any given program should accept both. The question,
instead, is what should you use?</p>

<h3>Configuration files.</h3>

<p>The pro-config-file argument is compelling. Store your settings a single time.
Easier to run in cron or some other automation. Can be changed at any time,
not merely when the program is about to run. Comments in the file itself
can remind you what the options are for.</p>

<p>The cons for this are obvious. Mainly, if you run the program with different
options very often, editing a file is actually more work than changing the
switches.</p>

<h3>Command Line</h3>

<p>Easy. Allows you to quickly modify behavior between several rapid uses of
the same program. Help screen will generally tell you what you need to know.</p>

<p>Tedious if you have many options. Easy to forget if the times between running
the program by hand are very long. Easy to mistype.</p>

<h3>Solution</h3>

<p>Where possible use both. Set your config file to your common and least-changed
settings, and use the command line for your often changing parameters.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Browserify and Me]]></title>
    <link href="http://darelf.github.io/blog/2014/01/27/browserify-and-me/"/>
    <updated>2014-01-27T08:18:54-05:00</updated>
    <id>http://darelf.github.io/blog/2014/01/27/browserify-and-me</id>
    <content type="html"><![CDATA[<p>The title might should be &ldquo;Caught between two worlds&rdquo;, but that sounded
really, really pretentious.</p>

<p>So, I had started a project a while back before realizing that something
like browserify existed. I know. I feel like a moron already, don&rsquo;t rub
it in. And even when I started using it I didn&rsquo;t really understand what
it was going to do.</p>

<p>Then, as I got halfway through the project, I realized what was happening
and started doing what I should have done the whole time. So now, the code
for this web application has two completely different approaches that,
while not technically incompatible, make reading and debugging the code
a chore.</p>

<p>Here&rsquo;s what I learned in this very specific context:</p>

<p>I&rsquo;m trying to use jquery/bootstrap to build a single page web application,
and then using browserify to make a bridge between the client and the node
server. That is, there are modules that run on node, and the application
module is most easily written in node as well. The only problem is how
to communicate between the server and client over what is essentially a
layer on top of websockets.</p>

<p>It turns out, that the cleanest solution to this problem turned out to be
using custom events on DOM elements from the application code, and catching
those events to do the UI parts. That is, some jquery/bootstrap code can
use all of its normal methods and coding style to accomplish the UI
functions, while the node style application code that has been browserified
can simply fire off events without worrying too much about what&rsquo;s going
to happen.</p>

<p>There are some improvements I can make, and will be making, in said
application. Things like passing in the DOM element to the client application
code, and more cleanly setting up the custom javascript DOM events.</p>

<p>All in all, though, stepping through the code again to refactor for all of
this new knowledge makes for better code and I learned a little something
along the way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tracking Pathfinder]]></title>
    <link href="http://darelf.github.io/blog/2014/01/24/tracking-pathfinder/"/>
    <updated>2014-01-24T14:35:35-05:00</updated>
    <id>http://darelf.github.io/blog/2014/01/24/tracking-pathfinder</id>
    <content type="html"><![CDATA[<p>Oh boy. Yeah. The Pathfinder RPG.</p>

<p>We play this game pretty relentlessly. Throughout that whole experience, years of slogging through
Pathfinder campaigns, we come across a simple problem: Pathfinder has a LOT of conditional
modifiers. Wow. A LOT.</p>

<p>As of now, we keep a rather complicated sheet of certain precalculated sets of modifiers that
tend to affect the whole group, things like Bless or Haste, and have them all added up so that
play can continue smoothly. Depending on how many casters, and what the current level is, the
number of modifiers &mdash; and more importantly the number of modifiers that clash &mdash; can get crazy.</p>

<p>So, as two of us are programmers by trade, we thought to ourselves &ldquo;We can do this electronically&rdquo;.</p>

<p>Ah, hubris. That&rsquo;s all fine and well, but definition of the problem became a chore in and of
itself. Luckily we could keep defining down until comfortable with the scope, since we were only
out to please ourselves.</p>

<p>And so&hellip; <a href="http://github.com/darelf/bufftracker">bufftracker</a>. There is a companion web product,
though it is not yet finished. Honestly the base project is not yet finished. As I make more
progress I&rsquo;ll be updating it and probably post more on here about it.</p>

<p>Maybe. I dunno. We&rsquo;ll play it by ear.</p>
]]></content>
  </entry>
  
</feed>
